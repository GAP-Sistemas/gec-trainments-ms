service: gec-trainments

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  region: sa-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    MONGO_URI: ${env:MONGO_URI}
    REGION: ${self:provider.region}
    BUCKET_NAME: ${env:BUCKET_NAME}
    JSREPORT_USER: ${env:JSREPORT_USER}
    JSREPORT_PASSWORD: ${env:JSREPORT_PASSWORD}
    JSREPORT_URL: ${env:JSREPORT_URL}
    JSREPORT_CERTIFICATE_SHORT_ID: ${env:JSREPORT_CERTIFICATE_SHORT_ID}
  iamRoleStatements:
    - ${file(./iam/LambdaInvokeIAM.yml):LambdaInvokeIAM}
    - ${file(./iam/GenerateCertificateQueueIAM.yml):GenerateCertificateQueueIAM}
    - ${file(./iam/S3bucketIAM.yml):S3bucketIAM}

resources:
  Resources:
    GenerateCertificateQueue: ${file(resources/GenerateCertificateQueue.yml):GenerateCertificateQueue}
  Outputs:
    GenerateCertificateQueueArn: ${file(resources/GenerateCertificateQueue.yml):Outputs.GenerateCertificateQueueArn}
    GenerateCertificateQueueUrl: ${file(resources/GenerateCertificateQueue.yml):Outputs.GenerateCertificateQueueUrl}

functions:
  generateCertificate:
    handler: src/handlers/generateCertificate/generateCertificate.handler
    events:
      - sqs:
          arn: ${self:custom.GenerateCertificateQueue.arn}
          batchSize: 1

custom:
  GenerateCertificateQueue:
    name: GenerateCertificateQueue-${self:provider.stage}
    arn: !GetAtt GenerateCertificateQueue.Arn
    url: !Ref GenerateCertificateQueue
  bundle:
    linting: false
